plugins {
    id("org.hidetake.swagger.generator") version "2.18.2"
}


apply plugin: 'org.springframework.boot'

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

dependencies {
    // Corda dependencies.
    compile "$corda_release_group:corda-rpc:$corda_release_version"

    // CorDapp dependencies.
    compile project(":contracts")
    compile project(":workflows")
    compile("org.springframework.boot:spring-boot-starter-websocket:$spring_boot_version") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }
    compile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    compile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    compile "org.slf4j:jul-to-slf4j:$slf4j_version"

    implementation 'org.springdoc:springdoc-openapi-ui:1.1.11'
    swaggerCodegen group: 'org.openapitools', name: 'openapi-generator-cli', version: '5.2.1'
    implementation group: 'com.squareup.moshi', name: 'moshi', version: '1.4.0'

}


springBoot {
    mainClassName = "com.template.webserver.ServerKt"
}

/* The Client is the communication channel between the external and the node. This task will help you immediately
 * execute your rpc methods in the main method of the client.kt. You can somewhat see this as a quick test of making
 * RPC calls to your nodes.
 */
task runTemplateClient(type: JavaExec, dependsOn: assemble) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.template.ClientKt'
    args 'localhost:10006', 'user1', 'test'
}

/* This task will start the springboot server that connects to your node (via RPC connection). All of the http requests
 * are in the Controller file. You can leave the Server.kt and NodeRPCConnection.kt file untouched for your use.
 */
task runTemplateServer(type: JavaExec, dependsOn: assemble) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.template.webserver.ServerKt'
    args '--server.port=10050', '--config.rpc.host=localhost', '--config.rpc.port=10006', '--config.rpc.username=user1', '--config.rpc.password=test'
}

task runTemplateServer2(type: JavaExec, dependsOn: assemble) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.template.webserver.ServerKt'
    args '--server.port=10060', '--config.rpc.host=localhost', '--config.rpc.port=10009', '--config.rpc.username=user1', '--config.rpc.password=test'
}

task runTemplateServer3(type: JavaExec, dependsOn: assemble) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.template.webserver.ServerKt'
    args '--server.port=10070', '--config.rpc.host=localhost', '--config.rpc.port=10012', '--config.rpc.username=user1', '--config.rpc.password=test'
}


compileJava.options.encoding = 'UTF-8'
sourceSets.main.java.srcDirs = ['build/swagger-code-reinsurance/src/main/kotlin']
swaggerSources {
    reinsurance {
        inputFile = file('swagger/swagger.yaml')
        code {
            language = 'kotlin-spring'
            templateDir=file('swagger/template/')
            configFile = file('swagger/config.json')
            components = ['models', 'apis']
        }
    }
}
compileKotlin.dependsOn generateSwaggerCode
